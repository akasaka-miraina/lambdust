{
  "timestamp": "2025-08-06T08:17:32.641315+00:00",
  "system_info": {
    "cpu_count": 8,
    "total_memory_mb": 8192,
    "platform": "macos",
    "architecture": "aarch64",
    "rust_version": "1.70+"
  },
  "test_configuration": {
    "quick_mode": false,
    "iterations_per_test": 1000,
    "warmup_iterations": 100,
    "test_duration_seconds": 5,
    "memory_profiling_enabled": true
  },
  "categories": [
    {
      "name": "Arithmetic Operations",
      "description": "Performance of numeric computations and type promotions",
      "results": [
        {
          "test_name": "integer_addition: Add two integers repeatedly",
          "iterations": 1000,
          "total_time_ms": 0.0,
          "ops_per_second": 7597340.930674265,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "integer_multiplication: Multiply two integers repeatedly",
          "iterations": 1000,
          "total_time_ms": 0.0,
          "ops_per_second": 7853423.700062041,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "float_operations: Mixed floating point operations",
          "iterations": 1000,
          "total_time_ms": 0.0,
          "ops_per_second": 4347826.0869565215,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "complex_operations: Complex number arithmetic",
          "iterations": 1000,
          "total_time_ms": 0.0,
          "ops_per_second": 7100608.522150348,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "numeric_tower_promotions: Number type promotions across numeric tower",
          "iterations": 1000,
          "total_time_ms": 0.0,
          "ops_per_second": 5015673.981191223,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        }
      ],
      "summary": {
        "total_tests": 5,
        "avg_ops_per_second": 6382974.64420688,
        "performance_grade": "Excellent",
        "optimization_opportunities": [
          "Performance looks good in this category!"
        ]
      }
    },
    {
      "name": "List Operations",
      "description": "Performance of list construction, traversal, and manipulation",
      "results": [
        {
          "test_name": "list_construction_small: Construct 10-element list",
          "iterations": 1000,
          "total_time_ms": 3.0,
          "ops_per_second": 325022.7190880643,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": 3250227.1908806427,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "list_construction_large: Construct 1000-element list",
          "iterations": 1000,
          "total_time_ms": 194.0,
          "ops_per_second": 5149.757099346992,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": 5149757.099346992,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "list_traversal_small: Traverse 10-element list",
          "iterations": 1000,
          "total_time_ms": 0.0,
          "ops_per_second": 6474251.900192932,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": 64742519.00192932,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "list_traversal_large: Traverse 1000-element list",
          "iterations": 1000,
          "total_time_ms": 7.0,
          "ops_per_second": 139375.25043990315,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": 139375250.43990314,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "cons_car_cdr_operations: Basic cons, car, cdr operations",
          "iterations": 1000,
          "total_time_ms": 0.0,
          "ops_per_second": 2595993.3438730664,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        }
      ],
      "summary": {
        "total_tests": 5,
        "avg_ops_per_second": 1907958.5941386626,
        "performance_grade": "Excellent",
        "optimization_opportunities": [
          "Performance looks good in this category!"
        ]
      }
    },
    {
      "name": "Recursion Performance",
      "description": "Performance of recursive algorithms and deep call stacks",
      "results": [
        {
          "test_name": "factorial_10: Compute factorial of 10",
          "iterations": 1000,
          "total_time_ms": 0.0,
          "ops_per_second": 10033411.259494115,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "factorial_15: Compute factorial of 15",
          "iterations": 1000,
          "total_time_ms": 0.0,
          "ops_per_second": 9070294.784580499,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "factorial_20: Compute factorial of 20",
          "iterations": 1000,
          "total_time_ms": 0.0,
          "ops_per_second": 6344171.292624901,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "fibonacci_15: Compute fibonacci number 15",
          "iterations": 1000,
          "total_time_ms": 4.0,
          "ops_per_second": 236329.79823343476,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "fibonacci_20: Compute fibonacci number 20",
          "iterations": 1000,
          "total_time_ms": 47.0,
          "ops_per_second": 20998.90003561833,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "fibonacci_25: Compute fibonacci number 25",
          "iterations": 1000,
          "total_time_ms": 525.0,
          "ops_per_second": 1901.462414743179,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "tree_sum_recursion: Recursive tree sum computation",
          "iterations": 1000,
          "total_time_ms": 1148.0,
          "ops_per_second": 870.5905588286234,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 1.007,
            "median_time_ms": 1.0,
            "std_deviation_ms": 0.10464702575802387,
            "min_time_ms": 1.0,
            "max_time_ms": 3.0,
            "p95_time_ms": 1.0,
            "p99_time_ms": 1.0
          }
        }
      ],
      "summary": {
        "total_tests": 7,
        "avg_ops_per_second": 3672568.2982774484,
        "performance_grade": "Excellent",
        "optimization_opportunities": [
          "Performance looks good in this category!"
        ]
      }
    },
    {
      "name": "Memory Allocation",
      "description": "Performance of various memory allocation patterns",
      "results": [
        {
          "test_name": "small_object_allocation: Allocate many small objects",
          "iterations": 1000,
          "total_time_ms": 15.0,
          "ops_per_second": 64159.456266572786,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": 64159456.26657279,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "large_object_allocation: Allocate large string objects",
          "iterations": 1000,
          "total_time_ms": 24.0,
          "ops_per_second": 41531.47306943544,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": 4153147.3069435437,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "mixed_allocation_patterns: Mixed object type allocations",
          "iterations": 1000,
          "total_time_ms": 39.0,
          "ops_per_second": 25495.19053626686,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": 12747595.26813343,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "nested_structure_allocation: Allocate deeply nested structures",
          "iterations": 1000,
          "total_time_ms": 59.0,
          "ops_per_second": 16917.75433728927,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": 1691775.4337289268,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        }
      ],
      "summary": {
        "total_tests": 4,
        "avg_ops_per_second": 37025.96855239109,
        "performance_grade": "Fair",
        "optimization_opportunities": [
          "Performance looks good in this category!"
        ]
      }
    },
    {
      "name": "Function Calls",
      "description": "Performance of function calls and environment operations",
      "results": [
        {
          "test_name": "direct_function_calls: Direct Rust function invocation overhead",
          "iterations": 1000,
          "total_time_ms": 0.0,
          "ops_per_second": 1549287.4826867124,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "environment_lookups: Symbol lookup in environment chains",
          "iterations": 1000,
          "total_time_ms": 11.0,
          "ops_per_second": 89176.23453349683,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "symbol_interning: Symbol interning and lookup performance",
          "iterations": 1000,
          "total_time_ms": 3.0,
          "ops_per_second": 320611.36740427586,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": null,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        }
      ],
      "summary": {
        "total_tests": 3,
        "avg_ops_per_second": 653025.0282081617,
        "performance_grade": "Excellent",
        "optimization_opportunities": [
          "Performance looks good in this category!"
        ]
      }
    },
    {
      "name": "Realistic Programs",
      "description": "Performance of realistic Scheme program patterns",
      "results": [
        {
          "test_name": "sorting_algorithm: Bubble sort on list of integers",
          "iterations": 1000,
          "total_time_ms": 236.0,
          "ops_per_second": 4230.107259657203,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": 423010.7259657203,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "higher_order_map: Map square function over list",
          "iterations": 1000,
          "total_time_ms": 9.0,
          "ops_per_second": 105673.3372960835,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": 105673337.2960835,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        },
        {
          "test_name": "nested_data_processing: Process nested associative structures",
          "iterations": 1000,
          "total_time_ms": 69.0,
          "ops_per_second": 14428.530977154225,
          "memory_usage_mb": 0.0,
          "throughput_items_per_sec": 1442853.0977154225,
          "statistical_metrics": {
            "mean_time_ms": 0.0,
            "median_time_ms": 0.0,
            "std_deviation_ms": 0.0,
            "min_time_ms": 0.0,
            "max_time_ms": 0.0,
            "p95_time_ms": 0.0,
            "p99_time_ms": 0.0
          }
        }
      ],
      "summary": {
        "total_tests": 3,
        "avg_ops_per_second": 41443.99184429831,
        "performance_grade": "Fair",
        "optimization_opportunities": [
          "Performance looks good in this category!"
        ]
      }
    }
  ],
  "overall_summary": {
    "total_categories": 6,
    "total_tests": 27,
    "total_execution_time_seconds": 2.644057584,
    "overall_performance_score": 82.17391304347827,
    "lambdust_strengths": [
      "Excellent performance in Arithmetic Operations",
      "Excellent performance in List Operations",
      "Excellent performance in Recursion Performance",
      "Excellent performance in Function Calls"
    ],
    "performance_characteristics": {
      "Realistic Programs": 41443.99184429831,
      "Function Calls": 653025.0282081617,
      "Arithmetic Operations": 6382974.64420688,
      "List Operations": 1907958.5941386626,
      "Recursion Performance": 3672568.2982774484,
      "Memory Allocation": 37025.96855239109
    }
  },
  "performance_recommendations": [
    "Performance looks good in this category!",
    "Monitor memory allocation patterns for optimization opportunities",
    "Consider implementing JIT compilation for hot code paths"
  ]
}