;; Basic Lambdust examples demonstrating core language features

;; Simple arithmetic
(+ 1 2 3)

;; Function definition
(define (square x)
  (* x x))

(square 5)

;; Function with type annotation
(define (typed-multiply x y)
  #:type (-> Number Number Number)
  #:pure #t
  (* x y))

(typed-multiply 6 7)

;; Higher-order functions
(define (map f lst)
  (if (null? lst)
      '()
      (cons (f (car lst))
            (map f (cdr lst)))))

(map square '(1 2 3 4 5))

;; Let bindings
(let ((x 10)
      (y 20))
  (+ x y))

;; Conditional expressions
(define (abs x)
  (if (< x 0)
      (- x)
      x))

(abs -42)

;; Keyword parameters
(define (greet name #:greeting "Hello" #:punctuation "!")
  (string-append greeting ", " name punctuation))

(greet "World")
(greet "Alice" #:greeting "Hi" #:punctuation ".")

;; Pattern matching (future feature)
; (define (list-length lst)
;   (match lst
;     [() 0]
;     [(cons _ rest) (+ 1 (list-length rest))]))

;; Effect tracking
(define (print-and-return x)
  (display x)
  (newline)
  x)

(print-and-return "Hello, Effects!")