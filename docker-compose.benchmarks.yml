# Docker Compose configuration for Scheme benchmarking environment

version: '3.8'

services:
  # Main benchmarking service
  scheme-benchmarks:
    build:
      context: .
      dockerfile: Dockerfile.benchmarks
    container_name: scheme-benchmarks
    hostname: scheme-benchmarks
    
    # Resource limits for consistent benchmarking
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    
    # Environment variables
    environment:
      - BENCHMARK_ITERATIONS=10
      - BENCHMARK_WARMUP=3
      - BENCHMARK_TIMEOUT=300
      - BENCHMARK_MEMORY_LIMIT=2048
      - SCHEME_HEAP_SIZE=256m
      - GC_INITIAL_HEAP_SIZE=64m
      - RUST_BACKTRACE=1
    
    # Volume mounts for persistence
    volumes:
      # Mount the current directory for Lambdust source
      - .:/benchmarks/lambdust:ro
      # Mount results directory for output
      - benchmark-results:/benchmarks/results
      # Mount logs directory
      - benchmark-logs:/benchmarks/logs
      # Mount test cache for faster repeated runs
      - test-cache:/benchmarks/tests
    
    # Working directory
    working_dir: /benchmarks
    
    # Default command (can be overridden)
    command: ["./lambdust/run-benchmarks.sh"]
    
    # Network configuration
    networks:
      - benchmark-network
    
    # Health check
    healthcheck:
      test: ["CMD", "/benchmarks/health_check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Restart policy
    restart: unless-stopped
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # User and group
    user: "1000:1000"
    
    # Capabilities
    cap_drop:
      - ALL
    cap_add:
      - SYS_PTRACE  # For profiling tools
    
    # Ulimits for benchmarking
    ulimits:
      nproc: 2048
      nofile:
        soft: 4096
        hard: 8192
      stack: 268435456  # 256MB stack for deep recursion
    
    # Labels for organization
    labels:
      - "project=lambdust"
      - "component=benchmarking"
      - "environment=testing"

  # Results analyzer service (optional, for post-processing)
  results-analyzer:
    build:
      context: .
      dockerfile: Dockerfile.benchmarks
    container_name: results-analyzer
    
    environment:
      - PYTHONPATH=/benchmarks/lambdust/scripts
    
    volumes:
      - .:/benchmarks/lambdust:ro
      - benchmark-results:/benchmarks/results
      - benchmark-logs:/benchmarks/logs
    
    working_dir: /benchmarks
    
    # Only run when explicitly started
    profiles: ["analysis"]
    
    command: >
      bash -c "
        echo 'Processing benchmark results...' &&
        python3 /benchmarks/lambdust/scripts/process_results.py
          --config /benchmarks/lambdust/benchmark-config.yaml
          --input-dir /benchmarks/results/raw
          --output-dir /benchmarks/results/processed &&
        echo 'Generating reports...' &&
        python3 /benchmarks/lambdust/scripts/generate_report.py
          --input-dir /benchmarks/results/processed
          --output-dir /benchmarks/results/reports
          --format html &&
        echo 'Analysis completed!'
      "
    
    networks:
      - benchmark-network
    
    labels:
      - "project=lambdust"
      - "component=analysis"

  # Web server for serving reports (optional)
  report-server:
    image: nginx:alpine
    container_name: report-server
    
    ports:
      - "8080:80"
    
    volumes:
      - benchmark-results:/usr/share/nginx/html/results:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    
    # Only run when explicitly started
    profiles: ["web"]
    
    networks:
      - benchmark-network
    
    labels:
      - "project=lambdust"
      - "component=web-server"
    
    depends_on:
      - results-analyzer

# Named volumes for data persistence
volumes:
  benchmark-results:
    driver: local
    labels:
      - "project=lambdust"
      - "type=results"
  
  benchmark-logs:
    driver: local
    labels:
      - "project=lambdust"
      - "type=logs"
  
  test-cache:
    driver: local
    labels:
      - "project=lambdust"
      - "type=cache"

# Network configuration
networks:
  benchmark-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "project=lambdust"
      - "component=networking"